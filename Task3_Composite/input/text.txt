Until now, composition has been used frequently. You simply place object handles inside new classes. For example, suppose youâ€™d like an object that holds several String objects, a couple of primitives and an object of another class.
    For the non-primitive objects, just put handles inside your new class, and for the primitives just define them inside your class:
    start
package c06;
class WaterSource {
 private String s;
 WaterSource() {
 System.out.println("WaterSource()");
 s = new String("Constructed");
 }
 public String toString() { return s; }
}
public class SprinklerSystem {
 private String valve1, valve2, valve3, valve4;
 WaterSource source;
 int i;
 float f;
 void print() {
 System.out.println("valve1 = " + valve1);
 System.out.println("valve2 = " + valve2);
 System.out.println("valve3 = " + valve3);
 System.out.println("valve4 = " + valve4);
 System.out.println("i = " + i);
 System.out.println("f = " + f);
 System.out.println("source = " + source);
 }
 public static void main(String[] args) {
 SprinklerSystem x = new SprinklerSystem();
 x.print();
 }
}
end
    One of the methods defined in WaterSource is special: toString(). You will learn later that
every non-primitive object has a toString() method, and it's called in special situations
when the compiler wants a String but it has got one of these objects.